on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  workflow_dispatch: # Allow manual triggers

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Ensure it matches your project

      - name: Install dependencies
        run: |
          npm install

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android APK
        run: |
          cd android && chmod +x ./gradlew && ./gradlew assembleRelease

      - name: Publish App To Server
        env:
          DEPLOY_KEY:  ${{ secrets.SERVER_SSH_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          DEPLOY_DIR:  ${{ secrets.DEPLOY_DIR }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          scp -i deploy_key -o StrictHostKeyChecking=no -P 65002 android/app/build/outputs/apk/release/app-release.apk $SERVER_USER@$SERVER_HOST:${DEPLOY_DIR}/
          
          ssh -i deploy_key -o StrictHostKeyChecking=no -p 65002 $SERVER_USER@$SERVER_HOST << EOF
            cd ${DEPLOY_DIR}
            rm -rf app-release.apk 
            cd ..
            mv app-release.apk ./release/app-release.apk
          
          EOF

        
          rm deploy_key


      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

